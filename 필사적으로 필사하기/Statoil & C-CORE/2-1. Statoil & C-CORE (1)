{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\n\n# plt.rcParams['figure.figsize'] = 12, 8\n%matplotlib inline\n\n# Take a look at a iceberg\nimport plotly.offline as py\nimport plotly.graph_objs as go\nfrom plotly import tools\n\npy.init_notebook_mode(connected=True)\n# plotly를 jupyter notebook에 사용하려면 이 커맨드를 입력해야 합니다.","execution_count":null,"outputs":[]},{"metadata":{"_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","trusted":true},"cell_type":"code","source":"# Load data\ntrain = pd.read_json('../input/train.json')\ntest = pd.read_json('../input/test.json')\n\ntrain.inc_angle = train.inc_angle.replace('na', 0)\ntrain.inc_angle = train.inc_angle.astype(float).fillna(0.0)\nprint('done!')","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"train.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Genearte the training data\n# Create 3 bands having HH, HV and avg of both\nX_band_1 = np.array([np.array(band).astype(np.float32).reshape(75,75) for band in train['band_1']])\nX_band_2 = np.array([np.array(band).astype(np.float32).reshape(75,75) for band in train['band_2']])\nX_train = np.concatenate([X_band_1[:, :, :, np.newaxis], X_band_2[:, :, :, np.newaxis],((X_band_1+X_band_2)/2)[:, :, :, np.newaxis]], axis=-1)\n\nX_band_test_1 = np.array([np.array(band).astype(np.float32).reshape(75,75) for band in test['band_1']])\nX_band_test_2 = np.array([np.array(band).astype(np.float32).reshape(75,75) for band in test['band_2']])\nX_test = np.concatenate([X_band_test_1[:, :, :, np.newaxis], X_band_test_2[:, :, :, np.newaxis],((X_band_test_1+X_band_test_2)/2)[:, :, :, np.newaxis]], axis=-1)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"def plot_contour_2d(band1, band2, label):\n    fig = tools.make_subplots(rows=1, cols=2, specs=[[{'is_3d': True}, {'is_3d': True}]])\n    fig.append_trace(dict(type='surface', z=band1, colorscale='RdBu', scene='scene1', showscale=False), 1, 1)\n    fig.append_trace(dict(type='surface', z=band2, colorscale='RdBu', scene='scene2', showscale=False), 1, 2)\n    fig['layout'].update(title='3D surface plot for \"{}\" (left is from band1, right is from band2)'.format(label), titlefont=dict(size=30), height=800, width=1200)\n    \n    py.iplot(fig)\n    \n    fig, ax = plt.subplots(1, 2, figsize=(16, 10))\n    ax[0].imshow(X_band_1[num, :, :])\n    ax[0].set_title('Image from band_1', fontsize=15)\n    ax[1].imshow(X_band_2[num, :, :])\n    ax[1].set_title('Image from band_2', fontsize=15)\n    plt.show()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"num = 0\nlabel = 'iceberg' if (train['is_iceberg'].values[num] == 1) else 'ship'\nplot_contour_2d(X_band_1[num, :, :], X_band_2[num, :, :], label)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"num = 100\nlabel = 'iceberg' if (train['is_iceberg'].values[num] == 1) else 'ship'\nplot_contour_2d(X_band_1[num, :, :], X_band_2[num, :, :], label)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"> 위의 두 set은 ship을 나타냄."},{"metadata":{"trusted":true},"cell_type":"code","source":"num = 2\nlabel = 'iceberg' if (train['is_iceberg'].values[num] == 1) else 'ship'\nplot_contour_2d(X_band_1[num, :, :], X_band_2[num, :, :], label)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"num = 125\nlabel = 'iceberg' if (train['is_iceberg'].values[num] == 1) else 'ship'\nplot_contour_2d(X_band_1[num, :, :], X_band_2[num, :, :], label)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Import Keras\nfrom matplotlib import pyplot\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Input, Flatten, Activation\nfrom keras.layers import GlobalMaxPooling2D\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.layers.merge import Concatenate\nfrom keras.models import Model\nfrom keras import initializers\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, Callback, EarlyStopping","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# define our model\ndef getModel():\n    # Building the model\n    gmodel=Sequential()\n    # Conv Layer 1\n    gmodel.add(Conv2D(64, kernel_size=(3, 3),activation='relu', input_shape=(75, 75, 3)))\n    gmodel.add(MaxPooling2D(pool_size=(3, 3), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n    \n    # Conv Layer 2\n    gmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\n    gmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n    \n    # Conv Layer 3\n    gmodel.add(Conv2D(128, kernel_size=(3, 3), activation='relu'))\n    gmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n    \n    # Conv Layer 4\n    gmodel.add(Conv2D(64, kernel_size=(3, 3), activation='relu'))\n    gmodel.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    gmodel.add(Dropout(0.2))\n    \n    # Flatten the data for upcoming dense layers\n    gmodel.add(Flatten())\n    \n    # Dense Layers\n    gmodel.add(Dense(512))\n    gmodel.add(Activation('relu'))\n    gmodel.add(Dropout(0.2))\n    \n    # Dense Layer 2\n    gmodel.add(Dense(256))\n    gmodel.add(Activation('relu'))\n    gmodel.add(Dropout(0.2))\n    \n    # Sigmoid Layer\n    gmodel.add(Dense(1))\n    gmodel.add(Activation('sigmoid'))\n    \n    mypotim=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0)\n    gmodel.compile(loss='binary_crossentropy', optimizer=mypotim, metrics=['accuracy'])\n    gmodel.summary()\n    return gmodel\n\n\ndef get_callbacks(filepath, patience=2):\n    es = EarlyStopping('val_loss', patience=patience, mode='min')\n    msave = ModelCheckpoint(filepath, save_best_only = True)\n    return [es, msave]\n\nfile_path = '.model_weights.hdf5'\ncallbacks = get_callbacks(filepath=file_path, patience=5)","execution_count":20,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"target_train = train['is_iceberg']\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, target_train, random_state=1, train_size=0.8)","execution_count":21,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"# Without denoising, core features.\ngmodel = getModel()\ngmodel.fit(X_train, y_train,\n          batch_size=24,\n          epochs=20,\n          verbose=1,\n          validation_data=(X_valid, y_valid),\n          callbacks = callbacks)","execution_count":23,"outputs":[{"output_type":"stream","text":"_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nconv2d_5 (Conv2D)            (None, 73, 73, 64)        1792      \n_________________________________________________________________\nmax_pooling2d_5 (MaxPooling2 (None, 36, 36, 64)        0         \n_________________________________________________________________\ndropout_7 (Dropout)          (None, 36, 36, 64)        0         \n_________________________________________________________________\nconv2d_6 (Conv2D)            (None, 34, 34, 128)       73856     \n_________________________________________________________________\nmax_pooling2d_6 (MaxPooling2 (None, 17, 17, 128)       0         \n_________________________________________________________________\ndropout_8 (Dropout)          (None, 17, 17, 128)       0         \n_________________________________________________________________\nconv2d_7 (Conv2D)            (None, 15, 15, 128)       147584    \n_________________________________________________________________\nmax_pooling2d_7 (MaxPooling2 (None, 7, 7, 128)         0         \n_________________________________________________________________\ndropout_9 (Dropout)          (None, 7, 7, 128)         0         \n_________________________________________________________________\nconv2d_8 (Conv2D)            (None, 5, 5, 64)          73792     \n_________________________________________________________________\nmax_pooling2d_8 (MaxPooling2 (None, 2, 2, 64)          0         \n_________________________________________________________________\ndropout_10 (Dropout)         (None, 2, 2, 64)          0         \n_________________________________________________________________\nflatten_2 (Flatten)          (None, 256)               0         \n_________________________________________________________________\ndense_4 (Dense)              (None, 512)               131584    \n_________________________________________________________________\nactivation_4 (Activation)    (None, 512)               0         \n_________________________________________________________________\ndropout_11 (Dropout)         (None, 512)               0         \n_________________________________________________________________\ndense_5 (Dense)              (None, 256)               131328    \n_________________________________________________________________\nactivation_5 (Activation)    (None, 256)               0         \n_________________________________________________________________\ndropout_12 (Dropout)         (None, 256)               0         \n_________________________________________________________________\ndense_6 (Dense)              (None, 1)                 257       \n_________________________________________________________________\nactivation_6 (Activation)    (None, 1)                 0         \n=================================================================\nTotal params: 560,193\nTrainable params: 560,193\nNon-trainable params: 0\n_________________________________________________________________\nTrain on 1283 samples, validate on 321 samples\nEpoch 1/20\n1283/1283 [==============================] - 20s 16ms/step - loss: 1.1066 - acc: 0.5269 - val_loss: 0.6044 - val_acc: 0.6355\nEpoch 2/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.5553 - acc: 0.6765 - val_loss: 0.5490 - val_acc: 0.7072\nEpoch 3/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.5183 - acc: 0.7280 - val_loss: 0.5080 - val_acc: 0.7788\nEpoch 4/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.5027 - acc: 0.7327 - val_loss: 0.5000 - val_acc: 0.7477\nEpoch 5/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.4825 - acc: 0.7358 - val_loss: 0.4548 - val_acc: 0.8069\nEpoch 6/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.4631 - acc: 0.7724 - val_loss: 0.4144 - val_acc: 0.8162\nEpoch 7/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.4057 - acc: 0.8090 - val_loss: 0.4039 - val_acc: 0.8660\nEpoch 8/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.4059 - acc: 0.7981 - val_loss: 0.3922 - val_acc: 0.7975\nEpoch 9/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3924 - acc: 0.8192 - val_loss: 0.3567 - val_acc: 0.8692\nEpoch 10/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3791 - acc: 0.8223 - val_loss: 0.3366 - val_acc: 0.8754\nEpoch 11/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3692 - acc: 0.8340 - val_loss: 0.3072 - val_acc: 0.8723\nEpoch 12/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3366 - acc: 0.8441 - val_loss: 0.4660 - val_acc: 0.8162\nEpoch 13/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3241 - acc: 0.8441 - val_loss: 0.3073 - val_acc: 0.8629\nEpoch 14/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3204 - acc: 0.8363 - val_loss: 0.2962 - val_acc: 0.8723\nEpoch 15/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3451 - acc: 0.8449 - val_loss: 0.3256 - val_acc: 0.8598\nEpoch 16/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3080 - acc: 0.8620 - val_loss: 0.3016 - val_acc: 0.8598\nEpoch 17/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3184 - acc: 0.8636 - val_loss: 0.3199 - val_acc: 0.8629\nEpoch 18/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.2976 - acc: 0.8644 - val_loss: 0.2646 - val_acc: 0.8847\nEpoch 19/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.3368 - acc: 0.8449 - val_loss: 0.3099 - val_acc: 0.8847\nEpoch 20/20\n1283/1283 [==============================] - 19s 15ms/step - loss: 0.2820 - acc: 0.8706 - val_loss: 0.3027 - val_acc: 0.8785\n","name":"stdout"},{"output_type":"execute_result","execution_count":23,"data":{"text/plain":"<keras.callbacks.History at 0x7fac36fc6dd8>"},"metadata":{}}]},{"metadata":{"trusted":true},"cell_type":"code","source":"gmodel.load_weights(filepath=file_path)\nscore = gmodel.evaluate(X_valid, y_valid, verbose=1)\nprint('Test loss:', score[0])\nprint('Test accuracy: ', score[1])","execution_count":24,"outputs":[{"output_type":"stream","text":"321/321 [==============================] - 1s 3ms/step\nTest loss: 0.26464218353690155\nTest accuracy:  0.8847352024922118\n","name":"stdout"}]},{"metadata":{"trusted":true},"cell_type":"code","source":"predicted_test = gmodel.predict_proba(X_test)","execution_count":25,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"submission = pd.DataFrame()\nsubmission['id'] = test['id']\nsubmission['is_iceberg'] = predicted_test.reshape((predicted_test.shape[0]))\nsubmission.to_csv('sub.csv', index=False)","execution_count":26,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.6.4","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat":4,"nbformat_minor":1}
